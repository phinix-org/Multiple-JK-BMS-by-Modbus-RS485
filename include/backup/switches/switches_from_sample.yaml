  # *  0x0070  112 UINT32  4   RW  Charging switch                                     BatChargeEN             1: open; 0: close      switch
  # *  0x0074  116 UINT32  4   RW  Discharge switch                                    BatDisChargeEN          1: open; 0: close      switch
  # *  0x0078  120 UINT32  4   RW  Balance switch                                      BalanEN                 1: open; 0: close      switch

- platform: modbus_controller
  modbus_controller_id: ${modbus_contr_id}
  name: "${name} discharging"
  custom_command: [0x00, 0x03, 0x10, 0x74, 0x00, 0x02]
  write_lambda: |-
    payload.push_back(0x00);
    payload.push_back(0x10);
    payload.push_back(0x10);
    payload.push_back(0x74);
    payload.push_back(0x00);
    payload.push_back(0x02);
    payload.push_back(0x04);
    payload.push_back(0x00);
    payload.push_back(0x00);
    payload.push_back(0x00);
    payload.push_back(x);
    return true;
  lambda: |-
    if (data.size() != 4 ) {
      ESP_LOGE("Custom", "Invalid data size %d",data.size());
      return {};
    }
    return (data[3] == 1);

- platform: modbus_controller
  modbus_controller_id: ${modbus_contr_id}
  name: "${name} charging"
  custom_command: [0x00, 0x03, 0x10, 0x70, 0x00, 0x02]
  write_lambda: |-
    payload.push_back(0x00);
    payload.push_back(0x10);
    payload.push_back(0x10);
    payload.push_back(0x70);
    payload.push_back(0x00);
    payload.push_back(0x02);
    payload.push_back(0x04);
    payload.push_back(0x00);
    payload.push_back(0x00);
    payload.push_back(0x00);
    payload.push_back(x);
    return true;
  lambda: |-
    if (data.size() != 4 ) {
      ESP_LOGE("Custom", "Invalid data size %d",data.size());
      return {};
    }
    return (data[3] == 1);

- platform: modbus_controller
  modbus_controller_id: ${modbus_contr_id}
  name: "${name} balancing"
  custom_command: [0x00, 0x03, 0x10, 0x78, 0x00, 0x02]
  write_lambda: |-
    payload.push_back(0x00);
    payload.push_back(0x10);
    payload.push_back(0x10);
    payload.push_back(0x78);
    payload.push_back(0x00);
    payload.push_back(0x02);
    payload.push_back(0x04);
    payload.push_back(0x00);
    payload.push_back(0x00);
    payload.push_back(0x00);
    payload.push_back(x);
    return true;
  lambda: |-
    if (data.size() != 4 ) {
      ESP_LOGE("Custom", "Invalid data size %d",data.size());
      return {};
    }
    return (data[3] == 1);
